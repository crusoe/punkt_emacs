(defun joma-csv-align (separator)
  "Aligns columns of a buffer visting a csv file. The SEPARATOR parameter
specifies the column separator. The default value is a comma `,'"
  (interactive "cCSV Separator:")
  (let ((formatter (list))
        (line-elements-lengths (list)))
    (save-excursion
      (beginning-of-buffer)
      (while (not (eobp))
        (let ((element-position 0)
              (line-elements-lengths-temp (list)))
          (beginning-of-line)
          (setq line-elements (split-string
                               (buffer-substring (line-beginning-position) (line-end-position))
                               (char-to-string separator)))
          (dolist (element line-elements)
            (cond ((eq nil (nth 0 line-elements-lengths))
                   (push (length element) line-elements-lengths-temp))
                  ((>  (length element) (nth 0 line-elements-lengths))
                   (push (length element) line-elements-lengths-temp))
                  ((<=  (length element) (nth 0 line-elements-lengths))
                   (push (nth 0 line-elements-lengths) line-elements-lengths-temp)))
            (pop line-elements-lengths)
            (setq element-position (1+ element-position)))
          (if (> (length line-elements-lengths) 0)
              (setq line-elements-lengths (nconc (nreverse line-elements-lengths-temp) line-elements-lengths))
            (setq line-elements-lengths (nreverse line-elements-lengths-temp)))
          (forward-line))))

    (dolist (padding line-elements-lengths)
      (push (concat "%-"
                    (number-to-string padding)
                    "s")
            formatter))
    (setq formatter (reverse formatter))
    (princ formatter)

    (save-excursion
      (beginning-of-buffer)
      (while (not (eobp))
        (let ((element-position 0))
        (beginning-of-line)
    	(setq line-elements (split-string
    			     (delete-and-extract-region (line-beginning-position) (line-end-position))
    			     (char-to-string separator)))
    	(dolist (element line-elements)
    	  (insert (format (nth element-position formatter) (nth element-position line-elements)))
	  (if (< element-position (1- (length line-elements)))
	      (insert (char-to-string separator)))
    	  (setq element-position (1+ element-position)))
        (forward-line))))))
