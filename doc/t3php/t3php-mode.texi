\input texinfo  @c -*-texinfo-*-
@c %**start of header
@setfilename t3php-mode.info
@settitle Emacs TYPO3-PHP Mode Manual
@setchapternewpage off
@afourpaper
@macro typothree {}
TYPO3
@end macro
@macro typothreephp {}
T3PHP
@end macro
@macro ext {extkey}
@emph{\extkey\}
@end macro
@c %**end of header

@copying
This manual introduces a TYPO3-PHP major mode for Emacs, which is
specialized on editing PHP code in the TYPO3 world.

Copyright @copyright{} 2009 Joachim Mathes.

@quotation
This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
@end quotation
@end copying

@titlepage
@title TYPO3-PHP Mode
@subtitle An Emacs major mode for @typothree{}-PHP files
@author Joachim Mathes (@email{joachim_mathes@@web.de})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents
@ifnotinfo
@unnumbered List of figures
@listoffloats Figure
@page
@end ifnotinfo

@ifnottex
@node Top
@top TYPO3-PHP Mode

@insertcopying
@end ifnottex

@menu
* Introduction:: @typothree{}-PHP and Emacs
* Installation:: Prepare Emacs
* Using T3PHP mode:: Features, commands and key bindings
* TYPO3 Coding Guidelines::
* Key Index::
* Variable Index::
* Function Index::
@end menu

@c =====================================================================
@node Introduction, Installation, Top, Top
@comment  node-name,  next,  previous,  up
@chapter Introduction

This manual describes T3PHP mode, which extends Emacs with functionality
for editing @typothree{}-PHP files. Of course, it is also useful for PHP
coding in general.

GNU Emacs is an extensible, customizable text editor and can be obtained
for free from @uref{http://ftp.gnu.org/pub/gnu/emacs/}. @xref{Top,
,Preface, emacs, GNU Emacs manual}. The code is written and tested
on GNU Emacs version 23.1.1.

@c =====================================================================
@node Installation, Using T3PHP mode, Introduction, Top
@comment  node-name,  next,  previous,  up
@chapter Installation

To install @typothreephp{} Mode just drop file @file{t3php-mode.el} into
a directory on your load-path. If you are the administrator of the
system you are working on, a possible directory could be
@file{/usr/share/emacs/site-lisp/skampi-mode}, for example. You might
byte-compile it for better performance. @xref{Byte Compilation, , Byte
Compilation, elisp, Emacs Lisp}.

To set up Emacs to automatically edit files ending in @file{.php} using
@typothreephp{} Mode, add the following lines to your @file{~/.emacs}
file (GNU Emacs) or @file{~/.xemacs/init.el} file (XEmacs):
@lisp
(setq auto-mode-alist (cons '("\\.php$" . t3php-mode) auto-mode-alist))
(autoload 't3php-mode "t3php-mode" "TYPO3-PHP input file editing mode." t)
@end lisp
If you just want to test @typothreephp{} Mode or are not eager to modify
your @file{~/.emacs} file, type @kbd{M-x load-file}, load the
@file{t3php-mode.el} file and finally apply the mode to the current
buffer by typing @kbd{M-x t3php-mode}.

@c =====================================================================
@node Using T3PHP mode, TYPO3 Coding Guidelines, Installation, Top
@comment  node-name,  next,  previous,  up
@chapter Using T3PHP mode

@typothree{} Mode supports different display and editing features, which
will be described in the following sections.

@menu
* Customization::
* Syntax highlighting::
* Line indentation::
* Inserting code templates::
* Inserting classes::
* Buffer outline::
@end menu

@c ---------------------------------------------------------------------
@node Customization, Syntax highlighting, , Using T3PHP mode
@comment  node-name,  next,  previous,  up
@section Customization

@typothreephp{} Mode defines a customization group in Emacs, which is a
member of the Emacs standard customization group @code{Languages}, whose
parent Emacs group is @code{Programming}. Use @kbd{M-x customize} to
browse through the full list of customization groups or @kbd{M-x
customize-group} with parameter @samp{t3php} to enter the
@typothreephp{} Mode customization group directly

@noindent
The following user-customizable variables are provided.

@anchor{x-t3php-developer}
@deftypevar string t3php-developer
The current developer or author of the PHP code. The value of this
variable is used in the php-doc comments.

Default: @samp{Lisa Fremont <lisa@@fremont.de>}
@end deftypevar

@anchor{x-t3php-typo3-extension-directory}
@deftypevar string t3php-typo3-extension-directory
The path to the TYPO3 extensions' directory relative to the TYPO3 root
directory.

Default: @samp{ext/}
@end deftypevar

@anchor{x-t3php-path-to-typo3-extension-directory}
@deftypevar string t3php-path-to-typo3-extension-directory
The path to the TYPO3 extensions directory relative to the TYPO3 root
directory.

Default: @samp{typo3conf/}
@end deftypevar

@deftypevar string t3php-date-format
The date format which is used for php-doc comments.

Default: @samp{%Y-%m-%d}
@end deftypevar

@anchor{x-t3php-year-format}
@deftypevar string t3php-year-format
The year format which is used in php-doc comments.

Default: @samp{%Y}
@end deftypevar

@deftypevar integer t3php-block-indentation
The indentation relative to a predecessing line which begins a new
code block.

Default: @samp{4}
@end deftypevar

@deftypevar choice t3php-newline-function
This variable decides which function to call upon pressing
@kbd{@key{RET}}. Depending on the chosen option, line indentation will
be processed automatically. The following options are available for
@var{choice}:
@table @code
@item newline
This command just inserts newlines into the current buffer before point.
@item newline-and-indent
This function inserts a newline@footnote{Note the different meanings of
@emph{newline} and @emph{new line}, that goes with their different
spellings. @emph{newline} refers to the code representation of a new
line, while @emph{new line} means its interpretation as a visible new
line in the editor after pressing @kbd{@key{RET}}.}, then indents the
new line (the one following the newline just inserted) according to
@typothreephp{} Mode's internal indentation strategies.
@item reindent-then-newline-and-indent
This command reindents the current line, inserts a newline at point, and
then indents the new line (the one following the newline just inserted).
@end table

Default: @samp{newline}.
@end deftypevar

@deftypevar boolean t3php-php-doc-align
Determines whether the PHPDoc parameters are aligned after a method or
class is inserted with @code{t3php-insert-method} or
@code{t3php-insert-class} respectively. See @ref{Inserting methods} and
@ref{Inserting classes}, for more information.

Aligned parameters:
@smallformat
@verbatim
1  /**
2   * Define foobar
3   *
4   * @param   $foo
5   * @param   $bar
6   * @return
7   * @author  Lisa Fremont <lisa@fremont.de>
8   * @since   2009-12-02
9   */
10 public function foobar($foo, $bar) {
11
12 }
@end verbatim
@end smallformat

Unaligned parameters:
@smallformat
@verbatim
1  /**
2   * Define foobar
3   *
4   * @param $foo
5   * @param $bar
6   * @return
7   * @author Lisa Fremont <lisa@fremont.de>
8   * @since 2009-12-02
9   */
10 public function foobar($foo, $bar) {
11
12 }
@end verbatim
@end smallformat

Default: @samp{t}
@end deftypevar

@deftypevar string t3php-php-manual-url
URL at which to find PHP manual. You can replace @samp{en} with your ISO
language code.

Default: @samp{http://www.php.net/manual/en/}
@end deftypevar

@deftypevar string t3php-php-search-url
URL at which to search for documentation on a word, e.g. a PHP
function.

Default: @samp{http://www.php.net/manual/en/}
@end deftypevar

@deftypevar boolean t3php-outline-keep-other-windows
When the outline is viewed, the boolean value of this variable decides
if the currently selected @typothreephp{} Mode buffer will be
deleted. If the variable is set to true (@samp{t}) the current window is
split and the outline is displayed in the newly created window. When
@code{nil}, all other windows except the selected one will be deleted,
so that the outline window fills an adjustable
(@pxref{x-stswf,,t3php-outline-split-windows-fraction}) amount of the
frame.

Default: @samp{t}.
@end deftypevar

@deftypevar boolean t3php-outline-split-windows-horizontally
This variable determines the splitting mode, if the outline is
displayed. If true, split the current window horizontally. Otherwise
split the window vertically.

Default: @samp{nil}.

I must admit, that sometimes I get confused. So if it is not for your
orientation, at least it is for mine. :-)

@float Figure,fig:split_v
@center @image{images/split_v,,2cm,Splitting a window vertically,}
@caption{Splitting a window @emph{vertically}.}
@shortcaption{Splitting a window vertically.}
@end float

@float Figure,fig:split_h
@center @image{images/split_h,,2cm,Splitting a window horizontally,}
@caption{Splitting a window @emph{horizontally}.}
@shortcaption{Splitting a window horizontally.}
@end float
@end deftypevar

@anchor{x-stswf}
@deftypevar number t3php-outline-split-windows-fraction
This variable describes the fraction of the width or height of the
window, which is used for the outline.

Default: @samp{.3}.
@end deftypevar

@deftypevar boolean t3php-outline-follow-mode
If true, point in outline buffer will make @typothreephp{} window to
follow. It will show the corresponding part of the document. This flag
can be toggled from within the outline buffer with the @kbd{f} key.

Default: @samp{nil}.
@end deftypevar

@deftypevar color t3php-outline-hl-line-color
The color used to highlight the background of the horizontal line which
marks the current line of the outline buffer and the corresponding line
in the @typothreephp{} buffer when follow mode is active.

Default: @samp{DarkSlateBlue}.
@end deftypevar

@deftypevar color t3php-outline-method-name-color
The color used to highlight the lines in the outline, which refer to
the corresponding method.

Default: @samp{sea green}.
@end deftypevar

@c ---------------------------------------------------------------------
@node Syntax highlighting, Line indentation, Customization, Using T3PHP mode
@comment  node-name,  next,  previous,  up
@section Syntax highlighting

Syntax highlighting is a convenient feature of an editor to improve the
appearance hence the readability of code. @typothree{} Mode supports the
highlighting of single line and multiline comments, keywords and several
syntactic structures.

In XEmacs syntax highlighting should be enabled automatically. In GNU
Emacs you may have to add these lines to your @file{~/.emacs} file:
@lisp
(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)
@end lisp

@c ---------------------------------------------------------------------
@node Line indentation, Inserting code templates, Syntax highlighting, Using T3PHP mode
@comment  node-name,  next,  previous,  up
@section Line indentation

A PHP code line is indented automatically when the @key{TAB} key is
pressed while point is on the according line. The indentation takes
place with respect to the indentation of previous
lines. @xref{Customization}, for details. The default width is @code{4}.

Depending on the current value of the customizable variable
@var{t3php-newline-function}, line indentation might be executed
automatically after pressing @kbd{@key{RET}}. @xref{Customization}, for
details.

@c =====================================================================
@node Inserting code templates, , Line indentation, Using T3PHP mode
@comment  node-name,  next,  previous,  up
@section Inserting code templates
The following sections describe functions and their respective key
bindings to insert templates for methods and classes.

@menu
* Inserting methods::
* Inserting classes::
@end menu

@c ---------------------------------------------------------------------
@node Inserting methods, Inserting classes, , Inserting code templates
@comment  node-name,  next,  previous,  up
@subsection Inserting methods

@deffn {Interactive Command} t3php-insert-method
Insert the rudimentary method framework code with respect to TYPO3 coding
standards. The function asks interactively for the method name, an
auto-completed modifier (@code{public}, @code{protected},
@code{private}) and method arguments until an empty string is provided.
The inserted code consists of
@itemize
@item
a class header comment in PHPdoc style which contains
@itemize @minus
@item
empty lines for method descriptions
@item
@code{@@param} and variable name
@item
@code{@@return}
@item
@code{@@author} (default: @samp{t3php-developer})
@item
@code{@@since} (default: @samp{t3php-date-format})
@end itemize
@item
the method signature
@end itemize

Key binding: @kbd{C-c C-if}.
@end deffn
@noindent
The following example was inserted with parameters
@itemize
@item
Method name: @code{foobar}
@item
Modifier: @code{public}
@item
Parameter: @code{foo}
@item
Parameter: @code{bar}
@end itemize
@smallformat
@verbatim
1  /**
2   *
3   *
4   * @param $foo
5   * @param $bar
6   * @return
7   * @author Lisa Fremont <lisa@fremont.de>
8   * @since 2009-12-02
9   */
10 public function foobar($foo, $bar) {
11
12 }
@end verbatim
@end smallformat

@c .....................................................................
@node Inserting classes,  Buffer outline, Inserting methods, Inserting code templates
@comment  node-name,  next,  previous,  up
@subsection Inserting classes

@deffn {Interactive Command} t3php-insert-class
Insert the rudimentary class framework code with respect to TYPO3 coding
standards. The inserted code consists of
@itemize
@item
PHP tags
@item
a copyright notice where date and author are inserted automatically with
respect to customizable variables @samp{t3php-year-format} and
@samp{t3php-developer}. See @ref{x-t3php-year-format,, t3php-year-format} and
@ref{x-t3php-developer,, x-t3php-developer}, for more information.
@item
a marker comment for the class and function index which can be inserted
by TYPO3 extension @ext{extdeval}. The following empty lines might be
filled with required files.
@item
a class header comment in PHPdoc style which contains
@itemize @minus
@item
@code{@@author} (default: @samp{t3php-developer})
@item
@code{@@package} (default: @samp{TYPO3})
@item
@code{@@subpackage} (default: empty)
@item
@code{@@since} (default: @samp{t3php-date-format})
@end itemize
@item
the class definition
@item
a TYPO3 XCLASS inclusion code snippet for class extension and/or
overriding. The associative array @code{TYPO3_CONF_VARS} has a key which
refers to the current class path and file name, which is inserted
dynamically. The information is extracted from the customizable
variables @samp{t3php-path-to-typo3-extension-directory} and the buffer
file name. See @ref{x-t3php-typo3-extension-directory,,
t3php-typo3-extension-directory}, for more information.
@end itemize

Key binding: @kbd{C-c C-ic}.
@end deffn
@noindent
The following code example was inserted in an empty file named
@file{class.bar.php}:
@smallformat
@verbatim
1  <?php
2  /***************************************************************
3   *  Copyright notice
4   *
5   *  (c) 2009 Lisa Fremont <lisa@fremont.de>
6   *  All rights reserved
7   *
8   *  This script is part of the TYPO3 project. The TYPO3 project is
9   *  free software; you can redistribute it and/or modify
10  *  it under the terms of the GNU General Public License as published by
11  *  the Free Software Foundation; either version 2 of the License, or
12  *  (at your option) any later version.
13  *
14  *  The GNU General Public License can be found at
15  *  http://www.gnu.org/copyleft/gpl.html.
16  *
17  *  This script is distributed in the hope that it will be useful,
18  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
19  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
20  *  GNU General Public License for more details.
21  *
22  *  This copyright notice MUST APPEAR in all copies of the script!
23  ***************************************************************/
24 /**
25  * [CLASS/FUNCTION INDEX of SCRIPT]
26  *
27  * Hint: use extdeveval to insert/update function index above.
28  */
29
30
31
32
33
34 /**
35  *
36  *
37  * @author     Lisa Fremont <lisa@fremont.de>
38  * @package    TYPO3
39  * @subpackage
40  * @since      2009-12-02
41  */
42 class tslib_content {
43
44 }
45
46
47 /*******************************************************************************
48  * TYPO3 XCLASS INCLUSION (for class extension/overriding)
49  ******************************************************************************/
50 if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/foo/class.bar.php']) {
51     include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/foo/class.bar.php']);
52 }
53 ?>
@end verbatim
@end smallformat

@c ---------------------------------------------------------------------
@node Buffer outline, , Inserting classes, Using T3PHP mode
@comment  node-name,  next,  previous,  up
@section Buffer outline

@kindex @kbd{C-c C-t}
@kindex @kbd{n}
@kindex @kbd{@key{RIGHT}}
@kindex @kbd{@key{DOWN}}
@kindex @kbd{p}
@kindex @kbd{@key{LEFT}}
@kindex @kbd{@key{UP}}
@kindex @kbd{C-@key{HOME}}
@kindex @kbd{C-@key{END}}
@kindex @kbd{@key{SPC}}
@kindex @kbd{@key{TAB}}
@kindex @kbd{@key{RET}}
@kindex @kbd{f}
@kindex @kbd{r}
@kindex @kbd{k}
@kindex @kbd{?}

The outline buffer summarizes the methods of the PHP buffer and provides
comfortable navigation through the PHP buffer. The first three lines are
intangible and show the file name of the current PHP input file and the
shortcuts of the most important commands.

Each method in the current PHP buffer is referred to by its name. The
maximally displayed line width of a method name is limited to 40
characters. Thus, a longer name is chopped to a length of 40 characters
and ellipse characters (@code{...}) are concatenated. When you move the
mouse cursor over a method name the complete name is displayed
nevertheless. On graphical displays, it is displayed as a @emph{tooltip}
or @emph{balloon help} as it is called sometimes. On some systems, it is
shown in the echo area. On text-only terminals, Emacs can't follow the
mouse, and therefore is not able to show the complete name on
mouse-over.

The character and color of the leftmost column indicates the type of
method modifier:
@table @code
@item private
@code{[-]} (color: @samp{firebrick})
@item protected
@code{[#]} (color: @samp{goldenrod})
@item public
@code{[+]} (color: @samp{forest green})
@end table


The rightmost column presents the line numbers, which delimit the region
of the respective measurement block.
@smallformat
@verbatim
TABLE OF CONTENTS of ~/public_html/typo3/t3lib/class.t3lib_extmgm.php
SPC=view TAB=goto RET=goto+kill [f]ollow [r]escan  [k]ill [?]Help
-----------------------------------------------------------------------
[P] isLoaded                                      [  131-136  ]
[P] extPath                                       [  147-155  ]
[P] extRelPath                                    [  165-172  ]
[P] siteRelPath                                   [  182-185  ]
[P] getCN                                         [  194-197  ]
[P] addTCAcolumns                                 [  227-235  ]
[P] addToAllTCAtypes                              [  251-304  ]
[P] allowTableOnStandardPages                     [  315-320  ]
[P] addModule                                     [  332-378  ]
[P] addModulePath                                 [  390-395  ]
[P] insertModuleFunction                          [  412-421  ]
[P] addPageTSConfig                               [  431-435  ]
[P] addUserTSConfig                               [  445-449  ]
[P] addLLrefForTCAdescr                           [  460-472  ]
@end verbatim
@end smallformat

@deffn {Interactive Command} t3php-outline rescan
This command shows the outline of the current PHP buffer. If
@var{rescan} is true, the PHP buffer will be rescanned before the ouline
buffer is displayed.

Key binding @kbd{C-ct}.
@end deffn

@noindent
The outline buffer is a read-only buffer with few dedicated key bindings:
@table @kbd
@item n
Move to the next selectable item.

@item @key{RIGHT}
Move to the next selectable item.

@item @key{DOWN}
Move to the next selectable item.

@item p
Move to the previous selectable item.

@item @key{LEFT}
Move to the previous selectable item.

@item @key{UP}
Move to the previous selectable item.

@item C-@key{HOME}
Move to the beginning of the outline buffer.

@item C-@key{END}
Move to the end of the outline buffer.

@item @key{SPC}
Show the corresponding location of the @typothree{} buffer.

@item @key{TAB}
Go to the corresponding location of the @typothree{} buffer and keep the
outline window.

@item @key{RET}
Go to the corresponding location of the @typothree{} buffer and hide the
outline window.

@item f
Toggle follow mode.

@item r
Re-parse the @typothree{} buffer.

@item k
Kill the outline buffer.

@item ?
Show a help buffer.
@end table

@page

@c =====================================================================
@node TYPO3 Coding Guidelines, Key Index, Using T3PHP mode, Top
@comment  node-name,  next,  previous,  up
@appendix TYPO3 Coding Guidelines

This appendix refers to the section @emph{PHP file formatting} of the
manual @cite{TYPO3 Coding Guidelines} by the @emph{TYPO3 Core
Development Team}. I decided to append this documentation to have a
reference nearby, whenever I think of extending any @typothreephp{} Mode
features.

@menu
* General requirements::
* File structure::
* PHP syntax formatting::
* Using phpDoc::
* The ChangeLog file::
@end menu

@c ---------------------------------------------------------------------
@node General requirements, File structure, , TYPO3 Coding Guidelines
@comment  node-name,  next,  previous,  up
@section General requirements

@menu
* PHP tags::
* Line breaks::
* Line length::
* Whitespace and indentation::
* Character set::
@end menu

@c .....................................................................
@node PHP tags, Line breaks, , General requirements
@comment  node-name,  next,  previous,  up
@subsection PHP Tags

Each PHP file in TYPO3 must use full PHP tags. There must be exactly one
pair of opening and closing tags (no closing and opening tags in the
middle of the file). Example:
@smallformat
@verbatim
<?php
    // File content goes here
?>
@end verbatim
@end smallformat
There must be no empty lines after the closing PHP tag. Empty lines
after closing tags break output compression in PHP and/or result in AJAX
errors.

@c .....................................................................
@node Line breaks, Line length, PHP tags, General requirements
@comment  node-name,  next,  previous,  up
@subsection Line breaks

TYPO3 uses Unix line endings (@code{\n}, PHP @code{chr(10)}). If a
developer uses Windows or Mac OS X platform, the editor must be
configured to use Unix line endings.

@c .....................................................................
@node Line length, Whitespace and indentation, Line breaks, General requirements
@comment  node-name,  next,  previous,  up
@subsection Line length

Line length is limited to 80 characters. Longer lines should be split to
several lines. Each line fragment starting from the second must be
indented with one or more tab characters. Example:
@smallformat
@verbatim
       $rows = $GLOBALS['TYPO3_DB']->exec_SELECTgetRows('uid, title', 'pages',
                    'pid=' . $this->fullQuoteStr($this->pid, 'pages') .
                    $this->cObj->enableFields('pages'), '', 'title');
@end verbatim
@end smallformat
@noindent
In certain cases splitting lines exactly at 80 characters is not
feasible. In this case lines can be longer but such practice is
discouraged.

@c .....................................................................
@node Whitespace and indentation, Character set, Line length, General requirements
@comment  node-name,  next,  previous,  up
@subsection Whitespace and indentation

TYPO3 uses tab characters to indent source code. One indentation level
is one tab. There must be no white spaces in the end of a line. This
can be done manually or using a text editor that takes care of this.

@noindent
Spaces must be added:

@itemize
@item
on both sides of string, arithmetic, assignment and other similar
operators (for example, @code{.}, @code{=}, @code{+}, -
, @code{?}, @code{:}, @code{*}, etc)
@item
after commas
@item
in single line comments after the comment sign (double slash)
@item
after asterisks in multiline comments
@end itemize

@c .....................................................................
@node Character set, , Whitespace and indentation, General requirements
@comment  node-name,  next,  previous,  up
@subsection Character set

TYPO3 PHP files use iso-8859-1 character set.

@noindent
All XML files use UTF-8 character set.

@c ---------------------------------------------------------------------
@node File structure, PHP syntax formatting, General requirements, TYPO3 Coding Guidelines
@comment  node-name,  next,  previous,  up
@section File structure

TYPO3 files use the following structure:
@enumerate
@item
Opening PHP tag
@item
Copyright notice
@item
File information block (with optional function index) in phpDoc format
@item
Included files
@item
Class information block in phpDoc format
@item
PHP class
@item
XCLASS declaration
@item
Optional module execution code (for example, in eID classes)
@end enumerate
@noindent
The following sections discuss each of these parts.

@menu
* Copyright notice::
* File information block::
* Included files::
* Class information block::
* PHP class::
* XCLASS declaration::
* Optional module execution code::
@end menu

@c .....................................................................
@node Copyright notice, File information block, , File structure
@comment  node-name,  next,  previous,  up
@subsection Copyright notice

TYPO3 is released under the terms of GNU General Public License version
2 or any later version. The copyright notice with a reference to the GPL
must be included at the top of every TYPO3 PHP class file. @code{user_}
files must have this copyright notice as well. Example:
@smallformat
@verbatim
<?php
/***************************************************************
 *  Copyright notice
 *
 *  (c) YYYY Your name here (your@email.here)
 *  All rights reserved
 *
 *  This script is part of the TYPO3 project. The TYPO3 project is
 *  free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  The GNU General Public License can be found at
 *  http://www.gnu.org/copyleft/gpl.html.
 *  A copy is found in the textfile GPL.txt and important notices to the license
 *  from the author is found in LICENSE.txt distributed with these scripts.
 *
 *
 *  This script is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/
@end verbatim
@end smallformat

@noindent
This notice may not be altered except for the year, author name and author e-mail.

@c .....................................................................
@node File information block, Included files, Copyright notice, File structure
@comment  node-name,  next,  previous,  up
@subsection File information block

File information block follows the copyright statement and provides
basic information about the file. It should include file name,
description of the file and information about the author (or
authors). Example:
@verbatim
/**
 * class.tx_myext_pi1.php
 *
 * Provides XYZ plugin implementation.
 *
 * $Id: class.tx_myext_pi1.php 9514 2008-07-23 17:06:12Z john_doe $
 *
 * @author John Doe <john.doe@example.com>
 */
@end verbatim
@noindent
The example above uses SVN $Id$ meta keyword. SVN will expand it to a
full version string when the file is committed.  The file information
block can also contain the optional function index. This index is
created and updated by the extdeveval extension.

@c .....................................................................
@node Included files, Class information block, File information block, File structure
@comment  node-name,  next,  previous,  up
@subsection Included files

Files are included using @code{require_once} function. All TYPO3 files
must use absolute paths in calls to @code{require_once}. There are two
ways to obtain the path to the included file:

@enumerate
@item
Use one of the predefined TYPO3 constants: @code{PATH_tslib},
@code{PATH_t3lib}, @code{PATH_typo3}, @code{PATH_site}. The first three
contain absolute paths to the corresponding TYPO3 directories. The last
constant contains absolute path to the TYPO3 root directory. Example:
@verbatim
require_once(PATH_tslib . 'class.tslib_pibase.php');
@end verbatim
@item
Use @code{t3lib_extMgm::extPath()} function. This function accepts two
arguments: extension key and path to the included file. The second
argument is optional but recommended to use. Examples:
@verbatim
require_once(t3lib_extMgm::extPath('lang', 'lang.php'));
require_once(t3lib_extMgm::extPath('lang') . 'lang.php');
@end verbatim
@end enumerate
@noindent
Always use one of these two ways to include files. This is required to
include files even from the current directory. Some installations do not
have the current directory in the PHP include path and
@code{require_once} without a proper path will result in fatal PHP
error.

@c .....................................................................
@node Class information block, PHP class, Included files, File structure
@comment  node-name,  next,  previous,  up
@subsection Class information block

Class information block is similar to the file information block and
describes the class in the file. Example:
@verbatim
/**
 * This class provides XYZ plugin implementation.
 *
 * @author John Doe <john.doe@example.com>
 * @author Jane Doe <jane.doe@example.com>
 */
@end verbatim

@c .....................................................................
@node PHP class, XCLASS declaration, Class information block, File structure
@comment  node-name,  next,  previous,  up
@subsection PHP class

PHP class follows the Class information block. PHP code must be
formatted as described in @ref{PHP syntax formatting}.  The class name
is expected to follow some conventions. The namespace and path parts are
all lowercase and separated by underscores (@samp{_}). At the end comes
the ``true'' class name which must be written in upper camel case.
Taking again the example of file
@file{class.t3lib_cache_backend_abstractbackend.php}, the PHP class
declaration will look like:
@verbatim
class t3lib_cache_backend_AbstractBackend {
    ...
}
@end verbatim

@c .....................................................................
@node XCLASS declaration, Optional module execution code, PHP class, File structure
@comment  node-name,  next,  previous,  up
@subsection XCLASS declaration

The XCLASS declaration must follow the PHP class. The format of the
XCLASS is very important. No spaces can be added or removed, no
reformatting can be done to the declaration. If the formatting is
changed, the TYPO3 Extension Manager will complain about a missing
XCLASS declaration.

The XCLASS declaration must include proper path to the current class
file. The following example assumes that extension key is @code{myext},
file name is @file{class.tx_myext_pi1.php} and file is located in the
@file{pi1} subdirectory of the extension:
@smallformat
@verbatim
if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/myext/pi1/class.tx_myext_pi1.php'])    {
    include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/myext/pi1/class.tx_myext_pi1.php']);
}
@end verbatim
@end smallformat

@c .....................................................................
@node Optional module execution code, , XCLASS declaration, File structure
@comment  node-name,  next,  previous,  up
@subsection Optional module execution code

Module execution code instantiates the class and runs its
method(s). Typically this code can be found in eID scripts and old
Backend modules. Here is how it may look like:
@verbatim
$controller = t3lib_div::makeInstance('tx_myext_ajaxcontroller');
$controller->main();
@end verbatim
@noindent
This code must appear @emph{after} the XCLASS declaration. @code{$SOBE}
is traditional but not required name.

@c ---------------------------------------------------------------------
@node PHP syntax formatting, Using phpDoc, File structure, TYPO3 Coding Guidelines
@comment  node-name,  next,  previous,  up
@section PHP syntax formatting

@menu
* Identifiers::
* Comments::
* Debug output::
* Curly braces::
* Conditions::
* Switch::
* Loops::
* Strings::
* Booleans::
* PHP5 features::
* Global variables::
* Functions::
@end menu

@c .....................................................................
@node Identifiers, Comments, , PHP syntax formatting
@comment  node-name,  next,  previous,  up
@subsection Identifiers

All identifiers must use camelCase and start with a lower case
letter. Underscore characters are not allowed.  Abbreviations should be
avoided. Examples of good identifiers:
@smallformat
@verbatim
$goodName
$anotherGoodName
@end verbatim
@end smallformat
@noindent
Examples of bad identifiers:
@smallformat
@verbatim
$BAD_name
$unreasonablyLongNamesAreBadToo
$noAbbrAlwd
@end verbatim
@end smallformat
@noindent
Identifier names must be descriptive. However it is allowed to use
traditional integer variables like @code{$i}, @code{$j}, @code{$k} in
for loops. If such variables are used, their meaning must be absolutely
clear from the context where they are used.
@noindent
The same rules apply to functions and class methods. Examples:
@smallformat
@verbatim
protected function getFeedbackForm()
public function processSubmission()
@end verbatim
@end smallformat
@noindent
Class constants should be clear about what they define. Correct:
@smallformat
@verbatim
const USERLEVEL_MEMBER = 1;
@end verbatim
@end smallformat
@noindent
Incorrect:
@smallformat
@verbatim
const UL_MEMBER = 1;
@end verbatim
@end smallformat
@noindent
Variables on the global scope may use upper case and underscore characters.
Examples:
@smallformat
@verbatim
$TYPO3_CONF_VARS
$TYPO3_DB
@end verbatim
@end smallformat

@c .....................................................................
@node Comments, Debug output, Identifiers, PHP syntax formatting
@comment  node-name,  next,  previous,  up
@subsection Comments

Comments in the code are highly welcome and recommended. Inline comments
must precede the commented line and be indented by one tab. Example:
@smallformat
@verbatim
protected function processSubmission() {
              // Check if user is logged in
       if ($GLOBALS['TSFE']->fe_user->user['uid']) {
              ...
       }
}
@end verbatim
@end smallformat
@noindent
Class constants and variable comments should follow PHP doc style and
precede the variable. Variable type must be specified for non–trivial
types and optional for trivial types. Example:
@smallformat
@verbatim
       /** Number of images submitted by user */
       protected $numberOfImages;
       /**
         * Local instance of tslib_cObj class
         *
         * @var tslib_cObj
         */
       protected $localCobj;
@end verbatim
@end smallformat
Single line comments are allowed when there is no type declaration for
the class variable or constant. If a variable can hold values of
different types, use @code{mixed} as type.

@c .....................................................................
@node Debug output, Curly braces, Comments, PHP syntax formatting
@comment  node-name,  next,  previous,  up
@subsection Debug output

During development it is allowed to use @code{debug()} or
@code{t3lib_div::debug()} function calls to produce debug
output. However all debug statements must be removed (removed, not
commented!) before committing the code to the Subversion repository.

@c .....................................................................
@node Curly braces, Conditions, Debug output, PHP syntax formatting
@comment  node-name,  next,  previous,  up
@subsection Curly braces

Usage of opening and closing curly braces is mandatory in all cases
where they can be used according to PHP syntax (except @code{case}
statements).

The opening curly brace is always on the same line as the preceding
construction. There must be a space (not a tab!) before the opening
brace. The opening brace is always followed by a new line.

The closing curly brace must start on a new line and be indented to the
same level as the construct with the opening brace. Example:
@smallformat
@verbatim
protected function getForm() {
       if ($this->extendedForm) {
             // generate extended form here
       } else {
             // generate simple form here
       }
}
The following is not allowed:
protected function getForm()
{
       if ($this->extendedForm) { // generate extended form here
       } else {
             // generate simple form here
       }
}
@end verbatim
@end smallformat

@c .....................................................................
@node Conditions, Switch, Curly braces, PHP syntax formatting
@comment  node-name,  next,  previous,  up
@subsection Conditions

Conditions consist from @code{if}, @code{elseif} and @code{else}
keywords. TYPO3 code must not use the @code{else if} construct.

@noindent
@smallformat
@verbatim
The following is the correct layout for conditions:
        if ($this->processSubmission) {
              // Process submission here
        } elseif ($this->internalError) {
              // Handle internal error
        } else {
              // Something else here
        }
@end verbatim
@end smallformat
@noindent
Here is an example of the incorrect layout:
@smallformat
@verbatim
        if ($this->processSubmission) {
              // Process submission here
        }
        elseif ($this->internalError) {
              // Handle internal error
        } else { // Something else here
@end verbatim
@end smallformat
@noindent
It is recommended to create conditions so that shortest block goes first. For example:
@smallformat
@verbatim
        if (!$this->processSubmission) {
              // Generate error message, 2 lines
        } else {
              // Process submission, 30 lines
        }
@end verbatim
@end smallformat
@noindent
If the condition is long, it must be split into several lines. Each
condition on the line starting from the second should be indented with a
two or more indents relative to the first line of the condition:
@smallformat
@verbatim
        if ($this->getSomeCodition($this->getSomeValiarble()) &&
                     $this->getAnotherCondition()) {
              // Code follows here
        }
@end verbatim
@end smallformat
@noindent
Ternary conditional operator must be used only if it has two
outcomes. Example:
@smallformat
@verbatim
$result = ($useComma ? ',' : '.');
@end verbatim
@end smallformat
@noindent
Wrong usage of ternary conditional operator:
@smallformat
@verbatim
$result = ($useComma ? ',' : $useDot ? '.' : ';');
@end verbatim
@end smallformat
Assignment in conditions should be avoided. However if it makes sense to
do assignment in condition, it should be surrounded by the extra pair of
brackets. Example:
@smallformat
@verbatim
        if (($fields = $GLOBALS['TYPO3_DB']->sql_fetch_result($res))) {
              // Do something
        }
@end verbatim
@end smallformat
@noindent
The following is allowed but not recommended:
@smallformat
@verbatim
        if (false !== ($fields = $GLOBALS['TYPO3_DB']->sql_fetch_result($res))) {
              // Do something
        }
@end verbatim
@end smallformat
@noindent
The following is not allowed (missing the extra pair of brackets):
@smallformat
@verbatim
        while ($fields = $GLOBALS['TYPO3_DB']->sql_fetch_result($res)) {
              // Do something
        }
@end verbatim
@end smallformat


@c .....................................................................
@node Switch, Loops, Conditions, PHP syntax formatting
@comment  node-name,  next,  previous,  up
@subsection Switch

@code{case} statements are indented with a single indent (tab) inside
the @code{switch} statement. The code inside the @code{case} statements
is further indented with a single indent. The @code{break} statement is
aligned with the code. Only one @code{break} statement is allowed per
@code{case}.

The @code{default} statement must be the last in the @code{switch} and
must not have a @code{break} statement.

If one @code{case} block has to pass control into another @code{case}
block without having a @code{break}, there must be a comment about it in
the code.

@noindent
Examples:
@smallformat
@verbatim
switch ($useType) {
      case 'extended':
            $content .= $this->extendedUse();
            // Fall through
      case 'basic':
            $content .= $this->basicUse();
            break;
      default:
            $content .= $this->errorUse();
}
@end verbatim
@end smallformat

@c .....................................................................
@node Loops, Strings, Switch, PHP syntax formatting
@comment  node-name,  next,  previous,  up
@subsection Loops

The following loops can be used:
@itemize
@item
@code{do}
@item
@code{while}
@item
@code{for}
@item
@code{foreach}
@end itemize
@noindent
The use of each is not allowed in loops.

@code{for} loops must contain only variables inside (no function
calls). The following is correct:
@smallformat
@verbatim
      $size = count($dataArray);
      for ($element = 0; $element < $size; $element++) {
            // Process element here
      }
@end verbatim
@end smallformat
@noindent
The following is not allowed:
@smallformat
@verbatim
      for ($element = 0; $element < count($dataArray); $element++) {
            // Process element here
      }
@end verbatim
@end smallformat
@code{do} and @code{while} loops must use extra brackets if assignment
happens in the loop:
@smallformat
@verbatim
      while (($fields = $GLOBALS['TYPO3_DB']->sql_fetch_result($res))) {
            // Do something
      }
@end verbatim
@end smallformat

@c .....................................................................
@node Strings, Booleans, Loops, PHP syntax formatting
@comment  node-name,  next,  previous,  up
@subsection Strings

All strings must use single quotes. Double quotes are allowed only to
create the new line character (``@code{\n}'').  String concatenation
operator must be surrounded by spaces. Example:
@smallformat
@verbatim
        $content = 'Hello ' . 'world!';
@end verbatim
@end smallformat
However the space after the concatenation operator must not be present
if the operator is the last construction on the line. @xref{Whitespace
and indentation}, for more information.

@noindent
Variables must not be embedded into strings. Correct:
@smallformat
@verbatim
        $content = 'Hello ' . $userName;
@end verbatim
@end smallformat
@noindent
Incorrect:
@smallformat
@verbatim
        $content = “Hello $userName”;
@end verbatim
@end smallformat
Multiline string concatenations are allowed. Line concatenation operator
must be at the end of the line. Lines starting from the second must be
indented relative to the first line. It is recommended to indent lines
one level from the start of the string on the first level:
@smallformat
@verbatim
        $content = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ' .
                          'Donec varius libero non nisi. Proin eros.';
@end verbatim
@end smallformat

@c .....................................................................
@node Booleans, PHP5 features, Strings, PHP syntax formatting
@comment  node-name,  next,  previous,  up
@subsection Booleans

Booleans must use PHP's language constructs and not explicit integer
values like 0 or 1. Furthermore they should be written in uppercase,
i.e. @code{TRUE} and @code{FALSE}.

@c .....................................................................
@node PHP5 features, Global variables, Booleans, PHP syntax formatting
@comment  node-name,  next,  previous,  up
@subsection PHP5 features

The use of PHP5 features is strongly recommended for extensions and
mandatory for the TYPO3 core versions 4.2 or greater.

Class functions must have access type specifier: @code{public},
@code{protected} or @code{private}. Notice that private may prevent
XCLASSing of the class. Therefore private can be used only if it is
absolutely necessary.

@noindent
Class variables must use access specifier instead of @code{var} keyword.

@noindent
Type hinting must be used when function expects array or an instance of
a certain class. Example:
@smallformat
@verbatim
       protected function executeAction(tx_myext_action& $action, array $extraParameters) {
             // Do something
       }
@end verbatim
@end smallformat
@noindent
Static functions must use @code{static} keyword. This keyword must be
the first keyword in the function definition:
@smallformat
@verbatim
       static public function executeAction(tx_myext_action& $action, array $extraParameters) {
             // Do something
       }
@end verbatim
@end smallformat
@noindent
@code{abstract} keyword also must be on the first position in the
function declaration:
@smallformat
@verbatim
       abstract protected function render();
@end verbatim
@end smallformat

@c .....................................................................
@node Global variables, Functions, PHP5 features, PHP syntax formatting
@comment  node-name,  next,  previous,  up
@subsection Global variables

Use of @code{global} is not recommended. Always use
@code{$GLOBALS['variable']}.

@c .....................................................................
@node Functions, , Global variables, PHP syntax formatting
@comment  node-name,  next,  previous,  up
@subsection Functions

If a function returns a value, it must always return it. The following
is not allowed:
@smallformat
@verbatim
function extendedUse($enabled) {
       if ($enabled) {
              return 'Extended use';
       }
}
@end verbatim
@end smallformat
@noindent
The following is the correct behavior:
@smallformat
@verbatim
function extendedUse($enabled) {
       $content = '';
       if ($enabled) {
              $content = 'Extended use';
       }
       return $content;
}
@end verbatim
@end smallformat
@noindent
In general there should be a single return statement in the function
(see the preceding example). However a function can return during
parameter validation before it starts its main logic. Example:
@smallformat
@verbatim
function extendedUse($enabled, tx_myext_useparameters $useParameters) {
       // Validation
       if (count($useParameters->urlParts) < 5) {
              return 'Parameter validation failed';
       }
       // Main functionality
       $content = '';
       if ($enabled) {
              $content = 'Extended use';
       } else {
              $content = 'Only basic use is available to you!';
       }
       return $content;
}
@end verbatim
@end smallformat
Functions should not be long. ``Long'' is not defined in terms of
lines. General rule is that function should fit into 2/3 of the
screen. This rule allows small changes in the function without splitting
the function further.

@c ---------------------------------------------------------------------
@node Using phpDoc, The ChangeLog file, PHP syntax formatting, TYPO3 Coding Guidelines
@comment  node-name,  next,  previous,  up
@section Using phpDoc

phpDoc is used for documenting source code. Typically TYPO3 code uses
the following phpDoc keywords:
@itemize
@item
@@author
@item
@@access
@item
@@global
@item
@@param
@item
@@package
@item
@@return
@item
@@see
@item
@@subpackage
@item
@@var
@end itemize
@noindent
For more information on phpDoc see the phpDoc web site at
@uref{http://www.phpdoc.org/} TYPO3 requires that each class, function
and method is documented with phpDoc. For information on phpDoc with use
in classes see @ref{Class information block}. Note that the @@author tag
should @strong{not} be used in function or method phpDoc comment blocks
--- only at class level --- because it is too liable to change
frequently and authors would accumulate indefinitely. @code{svn blame}
is enough for tracking changes.
@noindent
Functions should have parameters and return type documented. Example:
@smallformat
@verbatim
/**
  * Initializes the plugin. Checks the configuration and substitutes defaults for missing values.
  * @param   array $conf Plugin configuration from TypoScript
  * @return void
  * @see     tx_myext_class:anotherFunc()
  */
protected function initialize(array $conf) {
       // Do something
}
@end verbatim
@end smallformat
@noindent
Notice the use of @code{void} when function does not return a value.

@c ---------------------------------------------------------------------
@node The ChangeLog file, , Using phpDoc, TYPO3 Coding Guidelines
@comment  node-name,  next,  previous,  up
@section The ChangeLog file

TYPO3 core has a @file{ChangeLog} file where all changes are
recorded. This file is committed to the SVN together with the change.

@noindent
Each entry in the ChangeLog file has the following format:
@itemize
@item
Information about the date of the change (YYYY-mm-dd), author name and
author's e-mail address. These three pieces of information are
separated strictly by two spaces (no tabs!)
@item
Empty line
@item
One or more lines describing the change. Each such line is indented by a
single tab
@item
Empty line
@item
Line that describes the change consists from the following parts:
@item
Asterisk character
@item
Type of the change (``Fixed bug'' or ``Added feature'')
@item
Bug tracker issue id (``#12345'')
@item
A colon
@item
Bug tracker issue title or, if needed, a more meaningful title that
describes the change (``great feature for TYPO3'')
@item
Optional “thanks to” message of the patch was submitted by the contributor
@end itemize
@noindent
In some cases the line can have free format. This applies to
non–functional changes, like ``Formatting change'' or ``Fixed copyright
dates'').

@noindent
Here is an example of the ChangeLog entry:
@smallformat
@verbatim
2009-01-06   John Doe   <john@doe.com>
      * Fixed bug #12345: typolink does not take XYZ into account
      * Added feature #12345: Google sitemap in the TYPO3 core (thanks to Jane Doe)
@end verbatim
@end smallformat
@noindent
@code{ChangeLog} file updates are mandatory for every change in the
TYPO3 core. Extension authors are strongly recommended to use such file
with the same format in their extensions.

@c =====================================================================
@node Key Index, Variable Index, TYPO3 Coding Guidelines, Top
@comment  node-name,  next,  previous,  up
@unnumbered Key Index

@printindex ky

@c =====================================================================
@node Variable Index, Function Index, Key Index, Top
@comment  node-name,  next,  previous,  up
@unnumbered Variable Index

@printindex vr

@c =====================================================================
@node Function Index,  , Variable Index, Top
@comment  node-name,  next,  previous,  up
@unnumbered Function Index

@printindex fn

@bye
